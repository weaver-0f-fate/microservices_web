// <auto-generated />
using System;
using Events.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Events.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Events.Domain.Aggregates.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Recurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeSpan?>("UtcTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2aa86b08-9a32-45e2-9fbd-407e3e27569f"),
                            AdditionalInfo = "Additional info for Event 1",
                            Category = "Category 1",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 12, 14, 0, 11, 957, DateTimeKind.Unspecified).AddTicks(5431), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Event 1",
                            ImageUrl = "https://example.com/image1.jpg",
                            Place = "Place 1",
                            Title = "Event 1",
                            UtcTime = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("8d9326af-d0d4-4a49-a709-f214a1f97476"),
                            AdditionalInfo = "Additional info for Event 2",
                            Category = "Category 2",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 12, 14, 0, 11, 957, DateTimeKind.Unspecified).AddTicks(5465), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Event 2",
                            ImageUrl = "https://example.com/image2.jpg",
                            Place = "Place 2",
                            Title = "Event 2",
                            UtcTime = new TimeSpan(0, 19, 30, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2a8c63b8-90fd-4b42-aecb-c1cf83332ca5"),
                            AdditionalInfo = "Additional info for Event 3",
                            Category = "Category 1",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 12, 14, 0, 11, 957, DateTimeKind.Unspecified).AddTicks(5467), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2023, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Event 3",
                            ImageUrl = "https://example.com/image3.jpg",
                            Place = "Place 3",
                            Title = "Event 3",
                            UtcTime = new TimeSpan(0, 16, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("e6bfa644-1bb8-4b9f-9be8-c3129e50ea32"),
                            AdditionalInfo = "Additional info for Event 4",
                            Category = "Category 3",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 12, 14, 0, 11, 957, DateTimeKind.Unspecified).AddTicks(5468), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Event 4",
                            ImageUrl = "https://example.com/image4.jpg",
                            Place = "Place 4",
                            Title = "Event 4",
                            UtcTime = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("ca7c8490-9226-4c8c-84c0-e69b77b16745"),
                            AdditionalInfo = "Additional info for Event 5",
                            Category = "Category 2",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 9, 12, 14, 0, 11, 957, DateTimeKind.Unspecified).AddTicks(5470), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Event 5",
                            ImageUrl = "https://example.com/image5.jpg",
                            Place = "Place 5",
                            Title = "Event 5",
                            UtcTime = new TimeSpan(0, 20, 0, 0, 0)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
